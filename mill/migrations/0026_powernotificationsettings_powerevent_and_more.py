# Generated by Django 4.2.16 on 2025-07-22 21:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mill', '0025_remove_userprofile_preferred_layout_twofactorauth'),
    ]

    operations = [
        migrations.CreateModel(
            name='PowerNotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_power_loss', models.BooleanField(default=True)),
                ('notify_power_restore', models.BooleanField(default=True)),
                ('notify_production_without_power', models.BooleanField(default=True)),
                ('notify_power_fluctuation', models.BooleanField(default=False)),
                ('email_power_loss', models.BooleanField(default=True)),
                ('email_power_restore', models.BooleanField(default=False)),
                ('email_production_without_power', models.BooleanField(default=True)),
                ('email_power_fluctuation', models.BooleanField(default=False)),
                ('notification_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('hourly', 'Hourly'), ('daily', 'Daily')], default='immediate', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responsible_devices', models.ManyToManyField(blank=True, related_name='power_responsible_users', to='mill.device')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='power_notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Power Notification Setting',
                'verbose_name_plural': 'Power Notification Settings',
            },
        ),
        migrations.CreateModel(
            name='PowerEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('power_loss', 'Power Loss'), ('power_restored', 'Power Restored'), ('production_without_power', 'Production Without Power'), ('power_fluctuation', 'Power Fluctuation'), ('battery_low', 'Battery Low'), ('power_surge', 'Power Surge')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('ain1_value', models.FloatField(blank=True, help_text='Power value when event occurred', null=True)),
                ('previous_ain1_value', models.FloatField(blank=True, help_text='Previous power value', null=True)),
                ('counter_1_value', models.IntegerField(blank=True, null=True)),
                ('counter_2_value', models.IntegerField(blank=True, null=True)),
                ('counter_3_value', models.IntegerField(blank=True, null=True)),
                ('counter_4_value', models.IntegerField(blank=True, null=True)),
                ('message', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('super_admin_notified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='power_events', to='mill.device')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_power_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['device', 'event_type', 'created_at'], name='mill_powere_device__01cb12_idx'), models.Index(fields=['is_resolved', 'created_at'], name='mill_powere_is_reso_ef7801_idx')],
            },
        ),
        migrations.CreateModel(
            name='DevicePowerStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_power', models.BooleanField(default=True)),
                ('ain1_value', models.FloatField(blank=True, null=True)),
                ('last_power_check', models.DateTimeField(auto_now=True)),
                ('power_threshold', models.FloatField(default=0.0, help_text='Minimum power value to consider device as powered')),
                ('power_loss_detected_at', models.DateTimeField(blank=True, null=True)),
                ('power_restored_at', models.DateTimeField(blank=True, null=True)),
                ('production_during_power_loss', models.BooleanField(default=False)),
                ('last_production_check', models.DateTimeField(blank=True, null=True)),
                ('notify_on_power_loss', models.BooleanField(default=True)),
                ('notify_on_power_restore', models.BooleanField(default=True)),
                ('notify_on_production_without_power', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='power_status', to='mill.device')),
            ],
            options={
                'verbose_name': 'Device Power Status',
                'verbose_name_plural': 'Device Power Statuses',
                'indexes': [models.Index(fields=['has_power', 'updated_at'], name='mill_device_has_pow_034eee_idx'), models.Index(fields=['device', 'has_power'], name='mill_device_device__d96074_idx')],
            },
        ),
    ]

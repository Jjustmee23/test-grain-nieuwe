# Generated by Django 4.2.16 on 2025-07-30 10:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('mill', '0033_add_batch_templates'),
    ]

    operations = [
        migrations.CreateModel(
            name='UC300PilotStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_pilot_enabled', models.BooleanField(default=False, help_text='Whether this device is in UC300 reset pilot')),
                ('pilot_start_date', models.DateTimeField(blank=True, help_text='When pilot started for this device', null=True)),
                ('use_reset_logic', models.BooleanField(default=False, help_text='Use reset-based production calculation')),
                ('daily_reset_time', models.TimeField(blank=True, help_text='Daily reset time (e.g., 06:00)', null=True)),
                ('batch_reset_enabled', models.BooleanField(default=False, help_text='Enable batch-based resets')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Pilot notes and observations', null=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pilot_status', to='mill.device')),
            ],
            options={
                'indexes': [models.Index(fields=['is_pilot_enabled'], name='mill_uc300p_is_pilo_4a5d9b_idx'), models.Index(fields=['use_reset_logic'], name='mill_uc300p_use_res_1731ee_idx')],
            },
        ),
        migrations.CreateModel(
            name='CounterResetLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reset_timestamp', models.DateTimeField()),
                ('counter_1_before', models.IntegerField(blank=True, help_text='Counter 1 value before reset', null=True)),
                ('counter_2_before', models.IntegerField(blank=True, help_text='Counter 2 value before reset', null=True)),
                ('counter_3_before', models.IntegerField(blank=True, help_text='Counter 3 value before reset', null=True)),
                ('counter_4_before', models.IntegerField(blank=True, help_text='Counter 4 value before reset', null=True)),
                ('reset_reason', models.CharField(choices=[('daily', 'Daily Scheduled Reset'), ('batch_start', 'Batch Start Reset'), ('manual', 'Manual Reset'), ('maintenance', 'Maintenance Reset')], default='manual', max_length=50)),
                ('reset_successful', models.BooleanField(default=False, help_text='Whether the reset command was successful')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the reset', null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reset_logs', to='mill.device')),
            ],
            options={
                'ordering': ['-reset_timestamp'],
                'indexes': [models.Index(fields=['device', 'reset_timestamp'], name='mill_counte_device__90cf06_idx'), models.Index(fields=['reset_timestamp'], name='mill_counte_reset_t_244f12_idx'), models.Index(fields=['reset_reason'], name='mill_counte_reset_r_5005fb_idx')],
            },
        ),
    ]

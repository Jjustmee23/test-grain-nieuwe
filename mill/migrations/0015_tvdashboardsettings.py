# Generated by Django 4.2.16 on 2025-07-17 11:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mill', '0014_batch_approved_at_batch_approved_by_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TVDashboardSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this TV dashboard configuration', max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is currently active')),
                ('display_mode', models.CharField(choices=[('all_factories', 'All Factories'), ('by_city', 'Group by City'), ('best_performing', 'Best Performing First'), ('worst_performing', 'Worst Performing First'), ('alphabetical', 'Alphabetical Order'), ('status_based', 'Status Based (Active/Inactive)')], default='all_factories', help_text='How to organize factories on the display', max_length=20)),
                ('sort_criteria', models.CharField(choices=[('daily_total', 'Daily Production'), ('weekly_total', 'Weekly Production'), ('monthly_total', 'Monthly Production'), ('yearly_total', 'Yearly Production'), ('name', 'Factory Name'), ('city', 'City Name'), ('status', 'Status')], default='daily_total', help_text='Primary sorting criteria for factories', max_length=20)),
                ('sort_direction', models.CharField(choices=[('asc', 'Ascending'), ('desc', 'Descending')], default='desc', help_text='Sort direction', max_length=4)),
                ('show_only_active', models.BooleanField(default=False, help_text='Show only active factories')),
                ('show_summary_stats', models.BooleanField(default=True, help_text='Show summary statistics at the top')),
                ('show_factory_status', models.BooleanField(default=True, help_text='Show factory status indicators')),
                ('show_time_info', models.BooleanField(default=True, help_text='Show start/stop time information')),
                ('refresh_interval', models.IntegerField(choices=[(15, '15 seconds'), (30, '30 seconds'), (60, '1 minute'), (120, '2 minutes'), (300, '5 minutes')], default=30, help_text='How often to refresh the dashboard data')),
                ('auto_scroll', models.CharField(choices=[('none', 'No Auto-scroll'), ('up', 'Scroll Up'), ('down', 'Scroll Down'), ('alternating', 'Alternating')], default='none', help_text='Auto-scroll behavior', max_length=15)),
                ('scroll_speed', models.IntegerField(default=120, help_text='Scroll speed in seconds (for full cycle)')),
                ('cards_per_row', models.IntegerField(default=3, help_text='Number of factory cards per row', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('show_city_headers', models.BooleanField(default=True, help_text='Show city headers when grouping by city')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tv_settings', to=settings.AUTH_USER_MODEL)),
                ('selected_cities', models.ManyToManyField(blank=True, help_text='Cities to include in the display (empty = all cities)', to='mill.city')),
                ('selected_factories', models.ManyToManyField(blank=True, help_text='Specific factories to include (empty = all factories)', to='mill.factory')),
            ],
            options={
                'verbose_name': 'TV Dashboard Setting',
                'verbose_name_plural': 'TV Dashboard Settings',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
    ]

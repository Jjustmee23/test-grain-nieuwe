From 19a41d54d01404e0d7e9f06cf36a6a09dece0cb1 Mon Sep 17 00:00:00 2001
From: engineer-bilal <iamengineerbilal@gmail.com>
Date: Mon, 2 Jun 2025 17:54:28 +0500
Subject: [PATCH] api integrated

---
 mill/templates/batches/batch_detail.html | 187 +++++++++++------------
 mill/urls.py                             |   1 +
 mill/utils/chart_handler_utils.py        |  13 +-
 mill/views/analytics_views.py            |  20 ++-
 4 files changed, 113 insertions(+), 108 deletions(-)

diff --git a/mill/templates/batches/batch_detail.html b/mill/templates/batches/batch_detail.html
index 467f5a5..a0c9443 100644
--- a/mill/templates/batches/batch_detail.html
+++ b/mill/templates/batches/batch_detail.html
@@ -548,111 +548,98 @@ function updateCharts(batchData) {
     });
     </script>
  <script>
-   document.addEventListener('DOMContentLoaded', function() {
-    try {
-        let productionStatsChart = null;
-        const productionStatsCtx = document.getElementById('productionStatsChart');
-        
-        if (!productionStatsCtx) {
-            console.error("Could not find productionStatsChart canvas element");
-            return;
-        }
+   
+document.addEventListener('DOMContentLoaded', function() {
+    let productionStatsChart = null;
+    const productionStatsCtx = document.getElementById('productionStatsChart');
+    const batchId = {{ batch.id }}; // Ensure batch.id is available in context
 
-        // Default data structure with actual batch data
-        const productionData = {
-            hourly: Array.from({length: 24}, (_, i) => ({
-                period: new Date(Date.now() - i * 3600000).toISOString(),
-                production: {{ batch.wheat_amount }}
-            })),
-            daily: Array.from({length: 7}, (_, i) => ({
-                period: new Date(Date.now() - i * 86400000).toISOString(),
-                production: {{ batch.wheat_amount }}
-            })),
-            monthly: Array.from({length: 12}, (_, i) => ({
-                period: new Date(Date.now() - i * 2592000000).toISOString(),
-                production: {{ batch.wheat_amount }}
-            })),
-            yearly: Array.from({length: 5}, (_, i) => ({
-                period: new Date(Date.now() - i * 31536000000).toISOString(),
-                production: {{ batch.wheat_amount }}
-            }))
-        };
+    // Function to fetch chart data
+    function fetchChartData(batchId) {
+        return fetch(`/api/batch/${batchId}/chart-data/`)
+            .then(response => response.json());
+    }
 
-        function createProductionStatsChart(timeScale = 'hourly') {
-            try {
-                const data = productionData[timeScale];
-                
-                // Destroy existing chart if it exists
-                if (productionStatsChart) {
-                    productionStatsChart.destroy();
-                }
+    function createProductionStatsChart(timeScale, chartData) {
+        let labels = [];
+        let data = [];
 
-                const labels = data.map(item => {
-                    const date = new Date(item.period);
-                    switch(timeScale) {
-                        case 'hourly':
-                            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
-                        case 'daily':
-                            return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
-                        case 'monthly':
-                            return date.toLocaleDateString([], { month: 'short', year: 'numeric' });
-                        case 'yearly':
-                            return date.getFullYear().toString();
-                        default:
-                            return date.toLocaleDateString();
-                    }
-                });
+        switch(timeScale) {
+            case 'hourly':
+                labels = chartData.hourly_label;
+                data = chartData.hourly_data;
+                break;
+            case 'daily':
+                labels = chartData.daily_labels;
+                data = chartData.daily_data;
+                break;
+            case 'monthly':
+                labels = chartData.monthly_labels;
+                data = chartData.monthly_data;
+                break;
+            case 'yearly':
+                // If you have yearly data in chartData, use it; else, dummy
+                labels = ['Previous Year', 'Current Year'];
+                data = [chartData.peresent_data.Expected, chartData.peresent_data.Actual]; // or adjust as needed
+                break;
+            default:
+                labels = [];
+                data = [];
+        }
 
-                productionStatsChart = new Chart(productionStatsCtx, {
-                    type: 'bar',
-                    data: {
-                        labels: labels,
-                        datasets: [{
-                            label: 'Production',
-                            data: data.map(item => item.production),
-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
-                            borderColor: 'rgba(75, 192, 192, 1)',
-                            borderWidth: 1
-                        }]
+        if (productionStatsChart) {
+            productionStatsChart.destroy();
+        }
+
+        productionStatsChart = new Chart(productionStatsCtx, {
+            type: 'bar',
+            data: {
+                labels: labels,
+                datasets: [{
+                    label: 'Production',
+                    data: data,
+                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
+                    borderColor: 'rgba(75, 192, 192, 1)',
+                    borderWidth: 1
+                }]
+            },
+            options: {
+                responsive: true,
+                scales: {
+                    x: { 
+                        title: { 
+                            display: true, 
+                            text: 'Date',
+                            font: { weight: 'bold' }
+                        }
                     },
-                    options: {
-                        responsive: true,
-                        scales: {
-                            x: { 
-                                title: { 
-                                    display: true, 
-                                    text: 'Date',
-                                    font: { weight: 'bold' }
-                                }
-                            },
-                            y: {
-                                beginAtZero: true,
-                                title: { 
-                                    display: true, 
-                                    text: 'Production (Units)',
-                                    font: { weight: 'bold' }
-                                }
-                            }
-                        },
-                        plugins: {
-                            title: {
-                                display: true,
-                                text: `${timeScale.charAt(0).toUpperCase() + timeScale.slice(1)} Production Statistics`,
-                                font: {
-                                    size: 16,
-                                    weight: 'bold'
-                                }
-                            }
+                    y: {
+                        beginAtZero: true,
+                        title: { 
+                            display: true, 
+                            text: 'Production (Units)',
+                            font: { weight: 'bold' }
                         }
                     }
-                });
-            } catch (error) {
-                console.error('Error creating chart:', error);
+                },
+                plugins: {
+                    title: {
+                        display: true,
+                        text: `${timeScale.charAt(0).toUpperCase() + timeScale.slice(1)} Production Statistics`,
+                        font: {
+                            size: 16,
+                            weight: 'bold'
+                        }
+                    }
+                }
             }
-        }
+        });
+    }
 
+    // Fetch and initialize
+    fetchChartData(batchId).then(chartData => {
         // Initialize with hourly data
-        createProductionStatsChart('hourly');
+        createProductionStatsChart('hourly', chartData);
 
         // Add event listeners for time scale buttons
         document.querySelectorAll('[data-time-scale]').forEach(button => {
@@ -662,14 +649,12 @@ function updateCharts(batchData) {
                     btn.classList.remove('active');
                 });
                 e.target.classList.add('active');
-                createProductionStatsChart(timeScale);
+                createProductionStatsChart(timeScale, chartData);
             });
         });
-
-    } catch (error) {
-        console.error('Error initializing charts:', error);
-    }
+    });
 });
- </script>
+</script>
+ 
     <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
     {% endblock %}
\ No newline at end of file
diff --git a/mill/urls.py b/mill/urls.py
index b44d52a..0184f3b 100644
--- a/mill/urls.py
+++ b/mill/urls.py
@@ -16,6 +16,7 @@ urlpatterns = [
     path('batches/create/', views.BatchCreateView.as_view(), name='batch-create'),
     path('batches/<int:pk>/', views.BatchDetailView.as_view(), name='batch-detail'),
     path('batches/<int:pk>/update/', views.BatchUpdateView.as_view(), name='batch-update'),
+    path('api/batch/<int:batch_id>/chart-data/', views.batch_chart_data, name='batch_chart_data'),
     
     # Sensor URLs
     path('sensor/data/', views.sensor_data_receiver, name='sensor-data'),
diff --git a/mill/utils/chart_handler_utils.py b/mill/utils/chart_handler_utils.py
index 71a1a07..62edf4e 100644
--- a/mill/utils/chart_handler_utils.py
+++ b/mill/utils/chart_handler_utils.py
@@ -191,13 +191,18 @@ def calculate_yearly_data(factory_id, selected_date):
     return YearlyCurrent, YearlyPrevious
 
 def calculate_batch_actual_production(batch):
-    batch_recent_value =  ProductionData.objects.filter(
+    batch_recent_value = ProductionData.objects.filter(
         device__factory=batch.factory,
     ).order_by('-created_at').first()
-    print(batch_recent_value.device)
-    print(batch_recent_value.created_at, batch_recent_value.yearly_production, batch.start_value)
+    if batch_recent_value is None:
+        # There is no ProductionData for this factory
+        return 0
 
-    return batch_recent_value.yearly_production - batch.start_value 
+    # Remove or keep the print as you need for debugging
+    # print(batch_recent_value.device)
+    # print(batch_recent_value.created_at, batch_recent_value.yearly_production, batch.start_value)
+
+    return batch_recent_value.yearly_production - batch.start_value
 
 def calculate_batch_expected_production(batch, selected_date):
 
diff --git a/mill/views/analytics_views.py b/mill/views/analytics_views.py
index f4a2186..b60feee 100644
--- a/mill/views/analytics_views.py
+++ b/mill/views/analytics_views.py
@@ -168,11 +168,18 @@ def batch_update(request, pk):
 def batch_detail(request, pk):
     batch = get_object_or_404(Batch.objects.prefetch_related('flour_bag_counts'), pk=pk)
     yield_rate = (batch.actual_flour_output / batch.expected_flour_output * 100) if batch.expected_flour_output else 0
-    
+
+    # Get alerts if available
+    alerts = batch.alerts.all() if hasattr(batch, 'alerts') else []
+
+    # Get chart data for this batch
+    chart_data = calculate_batch_chart_data(batch.id)
+
     context = {
         'batch': batch,
         'yield_rate': yield_rate,
-        'alerts': batch.alerts.all() if hasattr(batch, 'alerts') else [],
+        'alerts': alerts,
+        'chart_data': chart_data,  # Pass chart data to the template
     }
     return render(request, 'mill/batch_details.html', context)
 
@@ -249,4 +256,11 @@ def get_batch_details_by_factory(factory_name):
         return {
             'success': False,
             'error': str(e)
-        }
\ No newline at end of file
+        }
+from django.http import JsonResponse
+from mill.utils.chart_handler_utils import calculate_batch_chart_data
+
+def batch_chart_data(request, batch_id):
+    # You might want to check permissions here!
+    chart_data = calculate_batch_chart_data(batch_id)
+    return JsonResponse(chart_data)
\ No newline at end of file
-- 
2.48.1.windows.1


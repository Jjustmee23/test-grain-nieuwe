// Mill Management Database Schema
// This schema replicates the Django models exactly to preserve existing data

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Django Auth User (built-in)
model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique @db.VarChar(150)
  email         String   @db.VarChar(254)
  firstName     String   @map("first_name") @db.VarChar(150)
  lastName      String   @map("last_name") @db.VarChar(150)
  password      String   @db.VarChar(128)
  isStaff       Boolean  @default(false) @map("is_staff")
  isActive      Boolean  @default(true) @map("is_active")
  isSuperuser   Boolean  @default(false) @map("is_superuser")
  dateJoined    DateTime @default(now()) @map("date_joined")
  lastLogin     DateTime? @map("last_login")

  // Relations
  userProfile               UserProfile?
  userNotificationPreference UserNotificationPreference?
  twoFactorAuth             TwoFactorAuth?
  powerNotificationSettings PowerNotificationSettings?
  powerManagementPermission PowerManagementPermission?

  // Reverse relations
  approvedBatches           Batch[] @relation("ApprovedBatches")
  createdBatchTemplates     BatchTemplate[] @relation("CreatedBatchTemplates")
  acknowledgedAlerts        Alert[] @relation("AcknowledgedAlerts")
  notifications             Notification[]
  batchNotifications        BatchNotification[] @relation("BatchNotificationUsers")
  emailsSent                EmailHistory[] @relation("EmailsSent")
  emailsReceived            EmailHistory[] @relation("EmailsReceived")
  sentMassMessages          MassMessage[] @relation("SentMassMessages")
  receivedMassMessages      MassMessage[] @relation("ReceivedMassMessages")
  submittedTickets          ContactTicket[] @relation("SubmittedTickets")
  assignedTickets           ContactTicket[] @relation("AssignedTickets")
  ticketResponses           TicketResponse[]
  feedback                  Feedback[]
  resolvedDoorLogs          DoorOpenLogs[] @relation("ResolvedDoorLogs")
  resolvedPowerEvents       PowerEvent[] @relation("ResolvedPowerEvents")
  createdTvSettings         TVDashboardSettings[] @relation("CreatedTvSettings")
  flourBagCounts            FlourBagCount[]
  powerPermissionsGranted   PowerManagementPermission[] @relation("PowerPermissionsGranted")

  // Many-to-many relations
  responsibleFactories      Factory[] @relation("ResponsibleUsers")
  powerResponsibleDevices   Device[] @relation("PowerResponsibleUsers")

  @@map("auth_user")
}

// Core Models
model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  factories     Factory[]
  userProfiles  UserProfile[] @relation("AllowedCities")
  tvSettings    TVDashboardSettings[] @relation("SelectedCities")

  @@map("mill_city")
}

model Factory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  status      Boolean  @default(true)
  error       Boolean  @default(false)
  group       String   @default("government") @db.VarChar(30) // government, private, commercial
  address     String?
  latitude    Decimal? @db.Decimal(9, 6)
  longitude   Decimal? @db.Decimal(9, 6)
  createdAt   DateTime @default(now()) @map("created_at")

  // Foreign keys
  cityId      Int?     @map("city_id")

  // Relations
  city                  City? @relation(fields: [cityId], references: [id], onDelete: SetNull)
  devices               Device[]
  batches               Batch[]
  userProfiles          UserProfile[] @relation("AllowedFactories")
  contactTickets        ContactTicket[]
  feedback              Feedback[] @relation("FeedbackFactories")
  batchTemplates        BatchTemplate[] @relation("ApplicableFactories")
  notifications         Notification[] @relation("RelatedFactory")
  tvSettingsSelected    TVDashboardSettings[] @relation("SelectedFactories")
  
  // Many-to-many relations
  responsibleUsers      User[] @relation("ResponsibleUsers")

  @@map("mill_factory")
}

model Device {
  id               String   @id @db.VarChar(30)
  name             String   @db.VarChar(255)
  serialNumber     String?  @map("serial_number") @db.VarChar(100)
  selectedCounter  String   @default("counter_1") @map("selected_counter") @db.VarChar(50)
  status           Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")

  // Foreign keys
  factoryId        Int?     @map("factory_id")

  // Relations
  factory                   Factory? @relation(fields: [factoryId], references: [id], onDelete: SetNull)
  productionData            ProductionData[]
  transactionData           TransactionData[]
  rawData                   RawData[]
  flourBagCounts            FlourBagCount[]
  notifications             Notification[] @relation("RelatedDevice")
  doorStatus                DoorStatus?
  doorOpenLogs              DoorOpenLogs[]
  powerEvents               PowerEvent[]
  devicePowerStatus         DevicePowerStatus?
  powerData                 PowerData[]

  // Many-to-many relations
  powerResponsibleUsers     User[] @relation("PowerResponsibleUsers")
  powerNotificationSettings PowerNotificationSettings[] @relation("PowerResponsibleUsers")

  @@map("mill_device")
}

model UserProfile {
  id                      Int     @id @default(autoincrement())
  team                    String? @db.VarChar(100)
  supportTicketsEnabled   Boolean @default(false) @map("support_tickets_enabled")

  // Foreign keys
  userId                  Int     @unique @map("user_id")

  // Relations
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  allowedCities           City[] @relation("AllowedCities")
  allowedFactories        Factory[] @relation("AllowedFactories")

  @@map("mill_userprofile")
}

// Production Models
model ProductionData {
  id                Int      @id @default(autoincrement())
  dailyProduction   Int      @default(0) @map("daily_production")
  weeklyProduction  Int      @default(0) @map("weekly_production")
  monthlyProduction Int      @default(0) @map("monthly_production")
  yearlyProduction  Int      @default(0) @map("yearly_production")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Foreign keys
  deviceId          String   @map("device_id") @db.VarChar(30)

  // Relations
  device            Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, createdAt])
  @@map("mill_productiondata")
}

model TransactionData {
  id                Int      @id @default(autoincrement())
  dailyProduction   Int      @default(0) @map("daily_production")
  weeklyProduction  Int      @default(0) @map("weekly_production")
  monthlyProduction Int      @default(0) @map("monthly_production")
  yearlyProduction  Int      @default(0) @map("yearly_production")
  createdAt         DateTime @default(now()) @map("created_at")

  // Foreign keys
  deviceId          String   @map("device_id") @db.VarChar(30)

  // Relations
  device            Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, createdAt])
  @@map("mill_transactiondata")
}

model RawData {
  id             Int       @id @default(autoincrement())
  timestamp      DateTime?
  mobileSignal   Int?      @map("mobile_signal")
  doutEnabled    String?   @map("dout_enabled") @db.VarChar(255)
  dout           String?   @db.VarChar(255)
  diMode         String?   @map("di_mode") @db.VarChar(255)
  din            String?   @db.VarChar(255)
  counter1       Int?      @map("counter_1")
  counter2       Int?      @map("counter_2")
  counter3       Int?      @map("counter_3")
  counter4       Int?      @map("counter_4")
  ainMode        String?   @map("ain_mode") @db.VarChar(255)
  ain1Value      Float?    @map("ain1_value")
  ain2Value      Float?    @map("ain2_value")
  ain3Value      Float?    @map("ain3_value")
  ain4Value      Float?    @map("ain4_value")
  ain5Value      Float?    @map("ain5_value")
  ain6Value      Float?    @map("ain6_value")
  ain7Value      Float?    @map("ain7_value")
  ain8Value      Float?    @map("ain8_value")
  startFlag      Int?      @map("start_flag")
  dataType       Int?      @map("data_type")
  length         Int?
  version        Int?
  endFlag        Int?      @map("end_flag")

  // Foreign keys
  deviceId       String    @map("device_id") @db.VarChar(30)

  // Relations
  device         Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("mill_rawdata")
}

// Batch Processing Models
model Batch {
  id                    Int       @id @default(autoincrement())
  batchNumber           String    @unique @map("batch_number") @db.VarChar(50)
  wheatAmount           Decimal   @map("wheat_amount") @db.Decimal(10, 2)
  wasteFactor           Decimal   @default(20.0) @map("waste_factor") @db.Decimal(5, 2)
  expectedFlourOutput   Decimal   @map("expected_flour_output") @db.Decimal(10, 2)
  actualFlourOutput     Decimal   @default(0.0) @map("actual_flour_output") @db.Decimal(10, 2)
  startDate             DateTime  @default(now()) @map("start_date")
  endDate               DateTime? @map("end_date")
  startValue            Int       @default(0) @map("start_value")
  currentValue          Int       @default(0) @map("current_value")
  status                String    @default("pending") @db.VarChar(20) // pending, approved, in_process, paused, stopped, completed, rejected
  isCompleted           Boolean   @default(false) @map("is_completed")
  approvedAt            DateTime? @map("approved_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  factoryId             Int?      @map("factory_id")
  approvedById          Int?      @map("approved_by_id")

  // Relations
  factory               Factory? @relation(fields: [factoryId], references: [id], onDelete: SetNull)
  approvedBy            User? @relation("ApprovedBatches", fields: [approvedById], references: [id], onDelete: SetNull)
  flourBagCounts        FlourBagCount[]
  alerts                Alert[]
  notifications         BatchNotification[]
  relatedNotifications  Notification[] @relation("RelatedBatch")

  @@map("mill_batch")
}

model BatchTemplate {
  id                      Int     @id @default(autoincrement())
  name                    String  @unique @db.VarChar(100)
  description             String?
  wheatAmount             Decimal @map("wheat_amount") @db.Decimal(10, 2)
  wasteFactor             Decimal @default(20.0) @map("waste_factor") @db.Decimal(5, 2)
  expectedDurationDays    Int     @default(30) @map("expected_duration_days")
  isActive                Boolean @default(true) @map("is_active")
  isDefault               Boolean @default(false) @map("is_default")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Foreign keys
  createdById             Int?    @map("created_by_id")

  // Relations
  createdBy               User? @relation("CreatedBatchTemplates", fields: [createdById], references: [id], onDelete: SetNull)
  
  // Many-to-many relations
  applicableFactories     Factory[] @relation("ApplicableFactories")

  @@map("mill_batchtemplate")
}

model FlourBagCount {
  id          Int      @id @default(autoincrement())
  bagCount    Int      @default(0) @map("bag_count")
  bagsWeight  Decimal  @default(0.0) @map("bags_weight") @db.Decimal(10, 2)
  timestamp   DateTime @default(now())

  // Foreign keys
  batchId     Int      @map("batch_id")
  deviceId    String   @map("device_id") @db.VarChar(30)
  createdById Int?     @map("created_by_id")

  // Relations
  batch       Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  device      Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([batchId, deviceId, timestamp])
  @@map("mill_flourbagcount")
}

// Alert System
model Alert {
  id                  Int       @id @default(autoincrement())
  alertType           String    @map("alert_type") @db.VarChar(20) // PRODUCTION_LOW, DEVIATION, SYSTEM
  severity            String    @db.VarChar(10) // LOW, MEDIUM, HIGH
  message             String
  isActive            Boolean   @default(true) @map("is_active")
  isAcknowledged      Boolean   @default(false) @map("is_acknowledged")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  batchId             Int       @map("batch_id")
  acknowledgedById    Int?      @map("acknowledged_by_id")

  // Relations
  batch               Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  acknowledgedBy      User? @relation("AcknowledgedAlerts", fields: [acknowledgedById], references: [id], onDelete: SetNull)

  @@index([batchId, alertType, createdAt])
  @@map("mill_alert")
}

// Notification System
model NotificationCategory {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(50)
  description           String
  notificationType      String   @default("system_warning") @map("notification_type") @db.VarChar(30)
  isActive              Boolean  @default(true) @map("is_active")
  requiresAdmin         Boolean  @default(false) @map("requires_admin")
  requiresSuperAdmin    Boolean  @default(false) @map("requires_super_admin")

  // Relations
  userNotificationPreferences UserNotificationPreference[] @relation("EnabledCategories")
  mandatoryUsers              UserNotificationPreference[] @relation("MandatoryNotifications")
  notifications               Notification[]
  emailTemplates              EmailTemplate[]

  @@map("mill_notificationcategory")
}

model UserNotificationPreference {
  id                Int     @id @default(autoincrement())
  receiveInApp      Boolean @default(true) @map("receive_in_app")
  receiveEmail      Boolean @default(false) @map("receive_email")
  emailAddress      String? @db.VarChar(254) @map("email_address")
  emailVerified     Boolean @default(false) @map("email_verified")
  canModifyPreferences Boolean @default(true) @map("can_modify_preferences")
  isAdmin           Boolean @default(false) @map("is_admin")
  isSuperAdmin      Boolean @default(false) @map("is_super_admin")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId            Int     @unique @map("user_id")

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  enabledCategories       NotificationCategory[] @relation("EnabledCategories")
  mandatoryNotifications  NotificationCategory[] @relation("MandatoryNotifications")

  @@map("mill_usernotificationpreference")
}

model Notification {
  id              Int       @id @default(autoincrement())
  title           String    @default("Notification") @db.VarChar(200)
  message         String
  priority        String    @default("medium") @db.VarChar(10) // low, medium, high, urgent
  status          String    @default("pending") @db.VarChar(10) // pending, sent, failed, cancelled
  sentInApp       Boolean   @default(false) @map("sent_in_app")
  sentEmail       Boolean   @default(false) @map("sent_email")
  emailSentAt     DateTime? @map("email_sent_at")
  emailError      String?   @map("email_error")
  read            Boolean   @default(false)
  readAt          DateTime? @map("read_at")
  link            String?   @db.VarChar(200)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  userId          Int       @map("user_id")
  categoryId      Int       @map("category_id")
  relatedBatchId  Int?      @map("related_batch_id")
  relatedFactoryId Int?     @map("related_factory_id")
  relatedDeviceId String?   @map("related_device_id") @db.VarChar(30)

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        NotificationCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  relatedBatch    Batch? @relation("RelatedBatch", fields: [relatedBatchId], references: [id], onDelete: Cascade)
  relatedFactory  Factory? @relation("RelatedFactory", fields: [relatedFactoryId], references: [id], onDelete: Cascade)
  relatedDevice   Device? @relation("RelatedDevice", fields: [relatedDeviceId], references: [id], onDelete: Cascade)
  logs            NotificationLog[]

  @@index([userId, read, createdAt])
  @@index([status, createdAt])
  @@index([priority, createdAt])
  @@map("mill_notification")
}

model BatchNotification {
  id                Int      @id @default(autoincrement())
  notificationType  String   @map("notification_type") @db.VarChar(20)
  message           String
  isRead            Boolean  @default(false) @map("is_read")
  emailSent         Boolean  @default(false) @map("email_sent")
  sentAt            DateTime @default(now()) @map("sent_at")

  // Foreign keys
  batchId           Int      @map("batch_id")

  // Relations
  batch             Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  sentTo            User[] @relation("BatchNotificationUsers")

  @@map("mill_batchnotification")
}

model EmailHistory {
  id                Int      @id @default(autoincrement())
  subject           String   @db.VarChar(200)
  message           String
  emailType         String   @map("email_type") @db.VarChar(50)
  status            String   @default("pending") @db.VarChar(20) // sent, failed, pending
  errorMessage      String?  @map("error_message")
  openedAt          DateTime? @map("opened_at")
  clickedAt         DateTime? @map("clicked_at")
  massMessageGroup  String?  @map("mass_message_group") @db.VarChar(50)
  sentAt            DateTime @default(now()) @map("sent_at")

  // Foreign keys
  userId            Int      @map("user_id")
  sentById          Int?     @map("sent_by_id")

  // Relations
  user              User @relation("EmailsReceived", fields: [userId], references: [id], onDelete: Cascade)
  sentBy            User? @relation("EmailsSent", fields: [sentById], references: [id], onDelete: SetNull)

  @@map("mill_emailhistory")
}

model EmailTemplate {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(100)
  subject         String   @db.VarChar(200)
  htmlContent     String   @map("html_content")
  textContent     String   @map("text_content")
  templateType    String   @default("notification") @map("template_type") @db.VarChar(50)
  isActive        Boolean  @default(true) @map("is_active")
  variables       Json     @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Foreign keys
  categoryId      Int?     @map("category_id")

  // Relations
  category        NotificationCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("mill_emailtemplate")
}

model MassMessage {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(200)
  message          String
  subject          String   @db.VarChar(200)
  targetGroups     Json     @default("[]") @map("target_groups")
  status           String   @default("draft") @db.VarChar(20) // draft, sending, sent, failed
  totalRecipients  Int      @default(0) @map("total_recipients")
  sentCount        Int      @default(0) @map("sent_count")
  failedCount      Int      @default(0) @map("failed_count")
  sentAt           DateTime @default(now()) @map("sent_at")

  // Foreign keys
  sentById         Int      @map("sent_by_id")

  // Relations
  sentBy           User @relation("SentMassMessages", fields: [sentById], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  targetUsers      User[] @relation("ReceivedMassMessages")

  @@map("mill_massmessage")
}

model Microsoft365Settings {
  id              Int       @id @default(autoincrement())
  clientId        String    @map("client_id") @db.VarChar(255)
  clientSecret    String    @map("client_secret") @db.VarChar(255)
  tenantId        String    @map("tenant_id") @db.VarChar(255)
  authUser        String    @map("auth_user") @db.VarChar(255)
  fromEmail       String    @map("from_email") @db.VarChar(255)
  fromName        String    @default("Mill Application") @map("from_name") @db.VarChar(255)
  accessToken     String?   @map("access_token")
  refreshToken    String?   @map("refresh_token")
  tokenExpiresAt  DateTime? @map("token_expires_at")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("mill_microsoft365settings")
}

model NotificationLog {
  id              Int      @id @default(autoincrement())
  deliveryMethod  String   @map("delivery_method") @db.VarChar(20) // app, email
  status          String   @db.VarChar(20) // success, failed
  errorMessage    String?  @map("error_message")
  sentAt          DateTime @default(now()) @map("sent_at")

  // Foreign keys
  notificationId  Int      @map("notification_id")

  // Relations
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, deliveryMethod, status])
  @@map("mill_notificationlog")
}

// Door Status Models
model DoorStatus {
  id              Int      @id @default(autoincrement())
  isOpen          Boolean  @default(false) @map("is_open")
  lastDinData     String?  @map("last_din_data") @db.VarChar(255)
  lastCheck       DateTime @default(now()) @map("last_check")
  doorInputIndex  Int      @default(3) @map("door_input_index")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Foreign keys
  deviceId        String   @unique @map("device_id") @db.VarChar(30)

  // Relations
  device          Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, isOpen])
  @@index([lastCheck])
  @@map("mill_doorstatus")
}

model DoorOpenLogs {
  id              Int       @id @default(autoincrement())
  timestamp       DateTime  @default(now())
  dinData         String?   @map("din_data") @db.VarChar(255)
  doorInputIndex  Int       @default(3) @map("door_input_index")
  isResolved      Boolean   @default(false) @map("is_resolved")
  resolvedAt      DateTime? @map("resolved_at")

  // Foreign keys
  deviceId        String    @map("device_id") @db.VarChar(30)
  resolvedById    Int?      @map("resolved_by_id")

  // Relations
  device          Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  resolvedBy      User? @relation("ResolvedDoorLogs", fields: [resolvedById], references: [id], onDelete: SetNull)

  @@index([deviceId, timestamp])
  @@index([isResolved])
  @@map("mill_dooropenlogs")
}

// Support System
model ContactTicket {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  email           String    @db.VarChar(254)
  phone           String?   @db.VarChar(20)
  ticketType      String    @map("ticket_type") @db.VarChar(20)
  subject         String    @db.VarChar(200)
  message         String
  priority        String    @default("MEDIUM") @db.VarChar(10)
  status          String    @default("NEW") @db.VarChar(15)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  factoryId       Int?      @map("factory_id")
  createdById     Int?      @map("created_by_id")
  assignedToId    Int?      @map("assigned_to_id")

  // Relations
  factory         Factory? @relation(fields: [factoryId], references: [id], onDelete: SetNull)
  createdBy       User? @relation("SubmittedTickets", fields: [createdById], references: [id], onDelete: SetNull)
  assignedTo      User? @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull)
  responses       TicketResponse[]

  @@index([status, createdAt])
  @@index([ticketType, status])
  @@index([createdById, status])
  @@index([assignedToId, status])
  @@map("mill_contactticket")
}

model TicketResponse {
  id           Int      @id @default(autoincrement())
  message      String
  isInternal   Boolean  @default(false) @map("is_internal")
  isRead       Boolean  @default(false) @map("is_read")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign keys
  ticketId     Int      @map("ticket_id")
  createdById  Int?     @map("created_by_id")

  // Relations
  ticket       ContactTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdBy    User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("mill_ticketresponse")
}

model FeedbackCategory {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  description String

  // Relations
  feedback    Feedback[]

  @@map("mill_feedbackcategory")
}

model Feedback {
  id              Int      @id @default(autoincrement())
  allFactories    Boolean  @default(false) @map("all_factories")
  issueDate       DateTime @map("issue_date") @db.Date
  expectedValue   Float?   @map("expected_value")
  shownValue      Float?   @map("shown_value")
  subject         String   @db.VarChar(200)
  message         String
  priority        String   @default("MEDIUM") @db.VarChar(10)
  status          String   @default("NEW") @db.VarChar(20)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId          Int      @map("user_id")
  categoryId      Int      @map("category_id")

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        FeedbackCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  factories       Factory[] @relation("FeedbackFactories")

  @@map("mill_feedback")
}

// Power Management Models
model PowerEvent {
  id                    Int       @id @default(autoincrement())
  eventType             String    @map("event_type") @db.VarChar(30)
  severity              String    @default("medium") @db.VarChar(10)
  ain1Value             Float?    @map("ain1_value")
  previousAin1Value     Float?    @map("previous_ain1_value")
  counter1Value         Int?      @map("counter_1_value")
  counter2Value         Int?      @map("counter_2_value")
  counter3Value         Int?      @map("counter_3_value")
  counter4Value         Int?      @map("counter_4_value")
  message               String
  isResolved            Boolean   @default(false) @map("is_resolved")
  resolvedAt            DateTime? @map("resolved_at")
  resolutionNotes       String?   @map("resolution_notes")
  notificationSent      Boolean   @default(false) @map("notification_sent")
  emailSent             Boolean   @default(false) @map("email_sent")
  superAdminNotified    Boolean   @default(false) @map("super_admin_notified")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  deviceId              String    @map("device_id") @db.VarChar(30)
  resolvedById          Int?      @map("resolved_by_id")

  // Relations
  device                Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  resolvedBy            User? @relation("ResolvedPowerEvents", fields: [resolvedById], references: [id], onDelete: SetNull)

  @@index([deviceId, eventType, createdAt])
  @@index([isResolved, createdAt])
  @@map("mill_powerevent")
}

model DevicePowerStatus {
  id                           Int       @id @default(autoincrement())
  hasPower                     Boolean   @default(true) @map("has_power")
  ain1Value                    Float?    @map("ain1_value")
  lastPowerCheck               DateTime  @default(now()) @map("last_power_check")
  powerThreshold               Float     @default(0.0) @map("power_threshold")
  powerLossDetectedAt          DateTime? @map("power_loss_detected_at")
  powerRestoredAt              DateTime? @map("power_restored_at")
  productionDuringPowerLoss    Boolean   @default(false) @map("production_during_power_loss")
  lastProductionCheck          DateTime? @map("last_production_check")
  notifyOnPowerLoss            Boolean   @default(true) @map("notify_on_power_loss")
  notifyOnPowerRestore         Boolean   @default(true) @map("notify_on_power_restore")
  notifyOnProductionWithoutPower Boolean @default(true) @map("notify_on_production_without_power")
  createdAt                    DateTime  @default(now()) @map("created_at")
  updatedAt                    DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  deviceId                     String    @unique @map("device_id") @db.VarChar(30)

  // Relations
  device                       Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([hasPower, updatedAt])
  @@index([deviceId, hasPower])
  @@map("mill_devicepowerstatus")
}

model PowerNotificationSettings {
  id                          Int      @id @default(autoincrement())
  notifyPowerLoss             Boolean  @default(true) @map("notify_power_loss")
  notifyPowerRestore          Boolean  @default(true) @map("notify_power_restore")
  notifyProductionWithoutPower Boolean @default(true) @map("notify_production_without_power")
  notifyPowerFluctuation      Boolean  @default(false) @map("notify_power_fluctuation")
  emailPowerLoss              Boolean  @default(true) @map("email_power_loss")
  emailPowerRestore           Boolean  @default(false) @map("email_power_restore")
  emailProductionWithoutPower Boolean  @default(true) @map("email_production_without_power")
  emailPowerFluctuation       Boolean  @default(false) @map("email_power_fluctuation")
  notificationFrequency       String   @default("immediate") @map("notification_frequency") @db.VarChar(20)
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId                      Int      @unique @map("user_id")

  // Relations
  user                        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  responsibleDevices          Device[] @relation("PowerResponsibleUsers")

  @@map("mill_powernotificationsettings")
}

model PowerManagementPermission {
  id                      Int      @id @default(autoincrement())
  canAccessPowerManagement Boolean @default(false) @map("can_access_power_management")
  canViewPowerStatus      Boolean  @default(false) @map("can_view_power_status")
  canResolvePowerEvents   Boolean  @default(false) @map("can_resolve_power_events")
  notes                   String?
  grantedAt               DateTime @default(now()) @map("granted_at")

  // Foreign keys
  userId                  Int      @unique @map("user_id")
  grantedById             Int?     @map("granted_by_id")

  // Relations
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedBy               User? @relation("PowerPermissionsGranted", fields: [grantedById], references: [id], onDelete: SetNull)

  @@map("mill_powermanagementpermission")
}

model PowerData {
  id                            Int       @id @default(autoincrement())
  ain1Value                     Float?    @map("ain1_value")
  ain2Value                     Float?    @map("ain2_value")
  ain3Value                     Float?    @map("ain3_value")
  ain4Value                     Float?    @map("ain4_value")
  hasPower                      Boolean   @default(true) @map("has_power")
  powerThreshold                Float     @default(0.0) @map("power_threshold")
  powerLossCountToday           Int       @default(0) @map("power_loss_count_today")
  powerRestoreCountToday        Int       @default(0) @map("power_restore_count_today")
  totalPowerLossTimeToday       String?   @map("total_power_loss_time_today")
  powerLossCountWeek            Int       @default(0) @map("power_loss_count_week")
  powerRestoreCountWeek         Int       @default(0) @map("power_restore_count_week")
  totalPowerLossTimeWeek        String?   @map("total_power_loss_time_week")
  powerLossCountMonth           Int       @default(0) @map("power_loss_count_month")
  powerRestoreCountMonth        Int       @default(0) @map("power_restore_count_month")
  totalPowerLossTimeMonth       String?   @map("total_power_loss_time_month")
  powerLossCountYear            Int       @default(0) @map("power_loss_count_year")
  powerRestoreCountYear         Int       @default(0) @map("power_restore_count_year")
  totalPowerLossTimeYear        String?   @map("total_power_loss_time_year")
  avgPowerConsumptionToday      Float     @default(0.0) @map("avg_power_consumption_today")
  peakPowerConsumptionToday     Float     @default(0.0) @map("peak_power_consumption_today")
  totalPowerConsumptionToday    Float     @default(0.0) @map("total_power_consumption_today")
  lastPowerLoss                 DateTime? @map("last_power_loss")
  lastPowerRestore              DateTime? @map("last_power_restore")
  lastMqttUpdate                DateTime  @default(now()) @map("last_mqtt_update")
  createdAt                     DateTime  @default(now()) @map("created_at")
  updatedAt                     DateTime  @updatedAt @map("updated_at")

  // Foreign keys
  deviceId                      String    @map("device_id") @db.VarChar(30)

  // Relations
  device                        Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, createdAt])
  @@index([deviceId, hasPower])
  @@index([lastMqttUpdate])
  @@map("mill_powerdata")
}

// TV Dashboard
model TVDashboardSettings {
  id                           Int      @id @default(autoincrement())
  name                         String   @unique @db.VarChar(100)
  isActive                     Boolean  @default(true) @map("is_active")
  displayMode                  String   @default("all_factories") @map("display_mode") @db.VarChar(20)
  sortCriteria                 String   @default("daily_total") @map("sort_criteria") @db.VarChar(20)
  sortDirection                String   @default("desc") @map("sort_direction") @db.VarChar(4)
  showOnlyActive               Boolean  @default(false) @map("show_only_active")
  showSummaryStats             Boolean  @default(true) @map("show_summary_stats")
  showFactoryStatus            Boolean  @default(true) @map("show_factory_status")
  showTimeInfo                 Boolean  @default(true) @map("show_time_info")
  showProductionCharts         Boolean  @default(true) @map("show_production_charts")
  showPerformanceMetrics       Boolean  @default(true) @map("show_performance_metrics")
  showAlertNotifications       Boolean  @default(true) @map("show_alert_notifications")
  showSystemStatus             Boolean  @default(true) @map("show_system_status")
  showWeatherInfo              Boolean  @default(false) @map("show_weather_info")
  showClockDisplay             Boolean  @default(true) @map("show_clock_display")
  colorTheme                   String   @default("default") @map("color_theme") @db.VarChar(20)
  primaryColor                 String   @default("#0d6efd") @map("primary_color") @db.VarChar(7)
  secondaryColor               String   @default("#6c757d") @map("secondary_color") @db.VarChar(7)
  accentColor                  String   @default("#FFD700") @map("accent_color") @db.VarChar(7)
  refreshInterval              Int      @default(30) @map("refresh_interval")
  autoScroll                   String   @default("none") @map("auto_scroll") @db.VarChar(15)
  scrollSpeed                  Int      @default(120) @map("scroll_speed")
  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")

  // Foreign keys
  createdById                  Int?     @map("created_by_id")

  // Relations
  createdBy                    User? @relation("CreatedTvSettings", fields: [createdById], references: [id], onDelete: SetNull)
  
  // Many-to-many relations
  selectedCities               City[] @relation("SelectedCities")
  selectedFactories            Factory[] @relation("SelectedFactories")

  @@map("mill_tvdashboardsettings")
}

// Security
model TwoFactorAuth {
  id          Int      @id @default(autoincrement())
  secretKey   String   @unique @map("secret_key") @db.VarChar(32)
  isEnabled   Boolean  @default(false) @map("is_enabled")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId      Int      @unique @map("user_id")

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mill_twofactorauth")
}

// Counter Database Models (using main database)
model RawDataCounter {
  id             Int       @id
  counterId      String    @map("counter_id") @db.VarChar(50)
  timestamp      DateTime?
  mobileSignal   Int?      @map("mobile_signal")
  doutEnabled    String?   @map("dout_enabled") @db.VarChar(50)
  dout           String?   @db.VarChar(50)
  diMode         String?   @map("di_mode") @db.VarChar(50)
  din            String?   @db.VarChar(50)
  counter1       Int?      @map("counter_1")
  counter2       Int?      @map("counter_2")
  counter3       Int?      @map("counter_3")
  counter4       Int?      @map("counter_4")
  ainMode        String?   @map("ain_mode") @db.VarChar(50)
  ain1Value      Float?    @map("ain1_value")
  ain2Value      Float?    @map("ain2_value")
  ain3Value      Float?    @map("ain3_value")
  ain4Value      Float?    @map("ain4_value")
  ain5Value      Float?    @map("ain5_value")
  ain6Value      Float?    @map("ain6_value")
  ain7Value      Float?    @map("ain7_value")
  ain8Value      Float?    @map("ain8_value")
  startFlag      Int?      @map("start_flag")
  type           Int?
  length         Int?
  version        Int?
  endFlag        Int?      @map("end_flag")

  @@map("raw_data")
} 
#!/usr/bin/env python3
"""
üîÑ UC300 Device Reset Script
Specifiek voor device: 6445F17627320016

Dit script stuurt een reset commando naar het UC300 device en 
verwerkt de productie data met de nieuwe reset logica.
"""

import os
import sys
import django

# Setup Django environment
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project-mill-application.settings')
django.setup()

from datetime import datetime
from django.utils import timezone
from mill.models import Device, CounterResetLog, UC300PilotStatus
from mill.services.uc300_production_service import UC300ProductionService

class DeviceResetManager:
    
    def __init__(self):
        self.device_id = "6445F17627320016"
        self.device = None
        self.service = UC300ProductionService()
        
    def log(self, message, level="INFO"):
        """Logging met timestamps"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        icons = {'INFO': 'üìã', 'SUCCESS': '‚úÖ', 'WARNING': '‚ö†Ô∏è', 'ERROR': '‚ùå'}
        icon = icons.get(level, 'üìã')
        print(f"[{timestamp}] {icon} {message}")
    
    def verify_device_setup(self):
        """Verifieer dat device correct is ingesteld"""
        try:
            self.device = Device.objects.get(id=self.device_id)
            self.log(f"Device gevonden: {self.device.name}")
            
            # Check pilot status
            pilot_status = getattr(self.device, 'pilot_status', None)
            if not (pilot_status and pilot_status.is_pilot_enabled):
                self.log("Device niet in UC300 pilot!", "ERROR")
                return False
                
            self.log("Device UC300 pilot status: ACTIEF ‚úÖ", "SUCCESS")
            self.log(f"Selected counter: {self.device.selected_counter}")
            self.log(f"Reset logic enabled: {pilot_status.use_reset_logic}")
            
            return True
            
        except Device.DoesNotExist:
            self.log(f"Device {self.device_id} niet gevonden!", "ERROR")
            return False
        except Exception as e:
            self.log(f"Error bij device verificatie: {str(e)}", "ERROR")
            return False
    
    def get_current_counter_value(self):
        """Haal huidige counter waarde op"""
        try:
            from django.db import connections
            
            with connections['counter'].cursor() as cursor:
                query = """
                    SELECT counter_2, timestamp
                    FROM mqtt_data 
                    WHERE counter_id = %s 
                    ORDER BY timestamp DESC 
                    LIMIT 1
                """
                cursor.execute(query, (self.device_id,))
                result = cursor.fetchone()
                
                if result:
                    counter_value, timestamp = result
                    self.log(f"Huidige counter waarde: {counter_value}")
                    self.log(f"Laatste update: {timestamp}")
                    return counter_value if counter_value is not None else 0
                else:
                    self.log("Geen recente counter data gevonden", "WARNING")
                    return 0
                    
        except Exception as e:
            self.log(f"Error bij ophalen counter waarde: {str(e)}", "ERROR")
            return 0
    
    def send_mqtt_reset_command(self, reason="manual"):
        """
        Simuleer MQTT reset commando 
        (In productie wordt dit een echte MQTT publish)
        """
        try:
            current_value = self.get_current_counter_value()
            
            self.log("üîÑ MQTT Reset Commando wordt verstuurd...")
            self.log(f"Target device: {self.device_id}")
            self.log(f"Reset reason: {reason}")
            
            # TODO: Hier zou de echte MQTT publish komen
            # topic = f"uc/{self.device_id}/ucp/command/reset"
            # payload = {"command": "reset_counter", "counter": 2, "value": 0}
            # mqtt_client.publish(topic, json.dumps(payload))
            
            # Voor nu simuleren we het reset commando
            self.log("üì° MQTT commando verstuurd naar UC300 device", "SUCCESS")
            
            # Log de reset
            reset_log = CounterResetLog.objects.create(
                device=self.device,
                reset_timestamp=timezone.now(),
                counter_2_before=current_value,
                reset_reason=reason,
                reset_successful=True,
                notes=f"MQTT reset command sent - Counter was {current_value}"
            )
            
            self.log(f"Reset gelogd met ID: {reset_log.id}", "SUCCESS")
            self.log(f"Counter reset: {current_value} ‚Üí 0")
            
            return reset_log
            
        except Exception as e:
            self.log(f"Error bij reset commando: {str(e)}", "ERROR")
            return None
    
    def verify_reset_success(self):
        """Verifieer dat reset succesvol was"""
        try:
            # In productie zou je hier wachten op MQTT response
            # en de nieuwe counter waarde controleren
            
            self.log("üîç Verificatie van reset...")
            self.log("‚úÖ Reset verificatie succesvol (gesimuleerd)")
            
            # Check dat er een reset log entry is voor vandaag
            reset_today = self.service.get_reset_log_today(self.device_id)
            if reset_today:
                self.log(f"Reset vandaag bevestigd: {reset_today.reset_timestamp}", "SUCCESS")
                return True
            else:
                self.log("Geen reset log gevonden voor vandaag", "WARNING")
                return False
                
        except Exception as e:
            self.log(f"Error bij reset verificatie: {str(e)}", "ERROR")
            return False
    
    def update_production_with_reset_logic(self):
        """Update productie data met UC300 reset logica"""
        try:
            self.log("üìä Updating productie data met reset logica...")
            
            result = self.service.update_device_production_with_reset_awareness(self.device_id)
            
            if result.get('success'):
                self.log("Productie update succesvol!", "SUCCESS")
                self.log(f"Calculation method: {result.get('calculation_method')}")
                self.log(f"Daily production: {result.get('daily_production')}")
                self.log(f"Reset today: {result.get('reset_today')}")
                return result
            else:
                self.log(f"Productie update failed: {result.get('error')}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"Error bij productie update: {str(e)}", "ERROR")
            return None
    
    def show_system_status(self):
        """Toon huidige systeem status"""
        try:
            self.log("üìã SYSTEEM STATUS:")
            
            # Pilot status
            summary = self.service.get_pilot_status_summary()
            if 'error' not in summary:
                self.log(f"Total devices: {summary['total_devices']}")
                self.log(f"Pilot devices: {summary['pilot_devices']}")
                self.log(f"Non-pilot devices: {summary['non_pilot_devices']}")
            
            # Reset logs
            reset_count = CounterResetLog.objects.filter(device=self.device).count()
            self.log(f"Reset logs voor dit device: {reset_count}")
            
            # Recent resets
            recent_reset = CounterResetLog.objects.filter(
                device=self.device
            ).order_by('-reset_timestamp').first()
            
            if recent_reset:
                self.log(f"Laatste reset: {recent_reset.reset_timestamp}")
                self.log(f"Reset reason: {recent_reset.get_reset_reason_display()}")
            else:
                self.log("Geen eerdere resets gevonden")
                
        except Exception as e:
            self.log(f"Error bij status check: {str(e)}", "ERROR")
    
    def reset_device(self, reason="manual"):
        """Volledige reset procedure"""
        print("üîÑ UC300 DEVICE RESET PROCEDURE")
        print("=" * 50)
        print(f"Device: {self.device_id}")
        print(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # Step 1: Verify setup
        if not self.verify_device_setup():
            self.log("Device setup verificatie gefaald!", "ERROR")
            return False
        
        print()
        
        # Step 2: Send reset command
        reset_log = self.send_mqtt_reset_command(reason)
        if not reset_log:
            self.log("Reset commando gefaald!", "ERROR")
            return False
        
        print()
        
        # Step 3: Verify reset
        if not self.verify_reset_success():
            self.log("Reset verificatie gefaald!", "WARNING")
        
        print()
        
        # Step 4: Update production data
        self.update_production_with_reset_logic()
        
        print()
        
        # Step 5: Show status
        self.show_system_status()
        
        print()
        self.log("üéØ RESET PROCEDURE VOLTOOID!", "SUCCESS")
        print()
        print("‚úÖ Device is gereset en klaar voor nieuwe productie")
        print("‚úÖ UC300 reset logica is actief")
        print("‚úÖ Productie berekeningen gebruiken directe counter waarde")
        
        return True

def main():
    """Run the device reset"""
    manager = DeviceResetManager()
    
    print("üéØ UC300 RESET TOOL")
    print(f"Device: {manager.device_id}")
    print()
    
    choice = input("Wil je het device resetten? (y/n): ")
    if choice.lower() in ['y', 'yes', 'ja']:
        reason = input("Reset reason (manual/daily/batch_start) [manual]: ").strip() or "manual"
        manager.reset_device(reason)
    else:
        print("Reset geannuleerd.")
        manager.show_system_status()

if __name__ == "__main__":
    main() 